"""
Writes output files from the cif parser.
"""
import numpy as np
from utilities import lattice_matrix, remove_occupancy, get_labels, sort_atoms, get_sym_ops, apply_sym_ops


class OutputWriter():

    def __init__(self, data):
        self.data = data

    def write_vasp(self):
        """
        Writes vasp output files.
        """
        av = lattice_matrix(self.data)
        x_site = np.array(remove_occupancy(
            self.data['_atom_site_fract_x']), dtype=float)
        y_site = np.array(remove_occupancy(
            self.data['_atom_site_fract_y']), dtype=float)
        z_site = np.array(remove_occupancy(
            self.data['_atom_site_fract_z']), dtype=float)

        name = None
        # search for name
        try:
            name = self.data['_chemical_name_systematic'][0]
        except:
            try:
                name = self.data['_chemical_name_common'][0]
            except:
                pass

        if name is None:
            name = 'Generated by cif_py'

        # get atoms and natoms
        atom_list = get_labels(self.data)
        coords = np.array([atom_list, x_site, y_site, z_site]).T
        ops = get_sym_ops(self.data)
        coords = apply_sym_ops(ops, coords)

        atoms, natoms, coords = sort_atoms(coords)
        coords = coords[:, 1:]

        # write POSCAR

        with open('POSCAR', 'w') as f:
            f.write("{}".format(''.join(name)))
            f.write("\n")
            f.write("1.0\n")
            f.write("{} {} {}\n".format(av[0][0], av[0][1], av[0][2]))
            f.write("{} {} {}\n".format(av[1][0], av[1][1], av[1][2]))
            f.write("{} {} {}\n".format(av[2][0], av[2][1], av[2][2]))
            f.write("{}\n".format(' '.join(atoms)))
            f.write("{}\n".format(' '.join(natoms)))
            f.write("Direct\n")
            for i in range(len(coords)):
                f.write("{} {} {}\n".format(coords[i, 0], coords[i, 1], coords[i, 2]))
