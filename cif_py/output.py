"""
Writes output files from the cif parser.
"""
import numpy as np
from .utilities import lattice_matrix, remove_occupancy, get_labels, sort_atoms, get_sym_ops, apply_sym_ops


class OutputWriter():

    def __init__(self, data):
        self.data = data

    def write_vasp(self):
        """
        Writes vasp output files.
        """
        av = lattice_matrix(self.data)

        # serach in data for 'fract_x' and 'fract_y' and 'fract_z'
        fract_x = None
        fract_y = None
        fract_z = None

        for key in self.data:
            if 'fract_x' in key:
                fract_x = self.data[key]
                print('found fract_x')
            if 'fract_y' in key:
                fract_y = self.data[key]
                print('found fract_y')
            if 'fract_z' in key:
                fract_z = self.data[key]
                print('found fract_z')

        if fract_x is None or fract_y is None or fract_z is None:
            raise ValueError('Could not find fractional coordinates.')

        x_site = np.array(remove_occupancy(fract_x))
        y_site = np.array(remove_occupancy(fract_y))
        z_site = np.array(remove_occupancy(fract_z))

        name = None
        # search for name
        try:
            name = self.data['_chemical_name_systematic'][0]
        except:
            try:
                name = self.data['_chemical_name_common'][0]
            except:
                pass

        if name is None:
            name = 'Generated by cif_py'

        # get atoms and natoms
        atom_list = get_labels(self.data)
        coords = np.array([atom_list, x_site, y_site, z_site]).T
        ops = get_sym_ops(self.data)
        new_coords = apply_sym_ops(ops, coords)
        coords = np.vstack((coords, new_coords))

        atoms, natoms, coords = sort_atoms(coords)
        coords = coords[:, 1:]

        # write POSCAR

        with open('POSCAR', 'w') as f:
            f.write("{}".format(''.join(name)))
            f.write("\n")
            f.write("1.0\n")
            f.write("{} {} {}\n".format(av[0][0], av[0][1], av[0][2]))
            f.write("{} {} {}\n".format(av[1][0], av[1][1], av[1][2]))
            f.write("{} {} {}\n".format(av[2][0], av[2][1], av[2][2]))
            f.write("{}\n".format(' '.join(atoms)))
            f.write("{}\n".format(' '.join(natoms)))
            f.write("Direct\n")
            for i in range(len(coords)):
                f.write("{} {} {}\n".format(coords[i, 0], coords[i, 1], coords[i, 2]))
